<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" >
    <channel>
        <title>BenRonkin.com Blog</title>
        <atom:link href="https://benronkin.com/blog/rss.xml" rel="self" type="application/rss+xml" />
        <description>I am Ben, an automation developer. I enjoy sharing my knowledge with Google Apps Script and Javascript in general.</description>
        <link>https://benronkin.com/blog</link>
        <pubDate>Thu, 2 Jul 2020 18:00:00 -0800</pubDate>
        <item>
            <title>Prevent CSS overwrites with iFrames</title>
            <description>In a
            &lt;a href="https://benronkin.com/blog/aggregate-newsletters-with-apps-script.html"
              &gt;previous post&lt;/a
            &gt;
            we saw how to aggregate email messages on a web page, so that we
            could read our newsletters on a single page, as opposed to fetching
            them from our overflowing inbox. One problem with injecting external
            HTML into your page is that the HTML can come with its own styling
            rules, and those rules can conflict with and overwrite other rules,
            whether in other HTML snippets or in your own page. This is
            happening because as the web browser renders the injected HTML, it
            processes any styling it encounters, and applies it – if relevant –
            to other snippets or to the containing page.</description>
            <link>https://benronkin.com/blog/prevent-css-overwrites-with-iframes.html</link> 
            <guid>https://benronkin.com/blog/prevent-css-overwrites-with-iframes.html</guid>
            <pubDate>Mon, 27 Feb 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Push Airtable data to Google Docs</title>
            <description>Airtable is a great solution for storing data of all kinds, and
              many people are using it for different use cases. Let's learn how
              to push Airtable data to a Google Doc. We'll use a simple Airtable
              base with a single Products table that has three columns: Name,
              SKU, and Quantity. We want to push to Google Doc all of the
              out-of-stock products whose quantity equals zero.</description>
            <link>https://benronkin.com/blog/push-airtable-data-to-google-docs-with-apps-script.html</link> 
            <guid>https://benronkin.com/blog/push-airtable-data-to-google-docs-with-apps-script.html</guid>
            <pubDate>Tue, 21 Feb 2023 13:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Print labels with mail-merge using Apps Script</title>
            <description>Are people still printing labels these days? I guess they are. Well,
            we can help those poor souls with some good-old Apps Script magic.
            Let's build a system that lets the user select a label type. The
            script will create a template that corresponds with the user's
            selection. The user will then paste a set of placeholders inside the
            template, and our Apps Script will take some fake recipients' data
            and mail-merge it into the labels. Sounds good? Lovely!</description>
            <link>https://benronkin.com/blog/print-labels-with-mail-merge-using-google-apps-script.html</link> 
            <guid>https://benronkin.com/blog/print-labels-with-mail-merge-using-google-apps-script.html</guid>
            <pubDate>Sat, 18 Feb 2023 11:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Fetch YouTube subscribers and comments with Apps Script</title>
            <description>YouTube has a terrific user interface that provides channel
              managers and owners like you and me with valuable statistics about
              the performance of our channels and their videos. But YouTube also
              has rich APIs that enable us to pull the data out of the system to
              anywhere we to consume it. So lets build a Google Apps Script
              webapp that will respond to GET requests and send over subscriber
              and comment information.</description>
            <link>https://benronkin.com/blog/fetch-youtube-subscribers-comments-with-apps-script.html</link> 
            <guid>https://benronkin.com/blog/fetch-youtube-subscribers-comments-with-apps-script.html</guid>
            <pubDate>Thu, 9 Feb 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Get the function caller</title>
            <description>Let's say that you have a bunch of functions that do different things, but at the end, they all call the same function. Let's call that function "wrapUp." Each time wrapUp gets called, you want it to log the name of its caller. How can you do that?</description>
            <link>https://benronkin.com/blog/get-the-function-caller.html</link> 
            <guid>https://benronkin.com/blog/get-the-function-caller.html</guid>
            <pubDate>Tue, 7 Feb 2023 12:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Aggregate newsletter emails with a Google Apps Script webapp</title>
            <description>I don't know about you, but I have a love-hate relationship with newsletter emails. On one hand, newsletters have terrific content: I get new, in-depth information directly from the source. Newsletters keep me informed about the subjects I care about the most. But I really, really dislike emails. For starters, I'm a zero-inbox kind of guy: I don't like emails sitting in my inbox. As soon as an email comes in, I'd like to process it and get rid of it right there and then. But I'm also very busy which means that I usually don't have the time to read newsletter emails when they decide to pop in.</description>
            <link>https://benronkin.com/blog/aggregate-newsletters-with-apps-script.html</link> 
            <guid>https://benronkin.com/blog/aggregate-newsletters-with-apps-script.html</guid>
            <pubDate>Mon, 6 Feb 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Create dynamic custom menus with Apps Script</title>
            <description>Remember the petition you and I wrote to the management team at our company regarding their recent decision to discontinue the work-from-home policy and have everyone back at the office? Well, I have bad news and good news: The bad news is that management would not relent: all employees must return to the office full-time. But the good news is that management has decided to institute a new performance-based bonus program!</description>
            <link>https://benronkin.com/blog/create-dynamic-custom-menus-with-apps-script.html</link> 
            <guid>https://benronkin.com/blog/create-dynamic-custom-menus-with-apps-script.html</guid>
            <pubDate>Thu, 2 Feb 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Download web images to Google Drive automatically using Apps Script</title>
            <description>Your team keeps a large storage of high-quality images on some web server, but the guy who manages the server was caught in the latest round of layoffs, and now nobody knows how to access and get these images. Luckily, Apps Script can automatically download these images to Google Drive, so no need to fret.</description>
            <link>https://benronkin.com/blog/download-images-automatically.html</link> 
            <guid>https://benronkin.com/blog/download-images-automatically.html</guid>
            <pubDate>Wed, 1 Feb 2023 14:50:00 -0800</pubDate>
        </item>
        <item>
            <title>Insert form submissions into Google Docs automatically</title>
            <description>All good things, as the saying goes, come to an end. After letting us work fully remote for past couple of years, management at our fledging startup has recently announced that it expected everyone back at the office five days a week. Goodbye work flexibility, and hello (again) insane commutes. You, dear reader, and I – AKA The OGs on the company's Slack – are of course not going to put up with that. After all, our fellow employees are looking to us to take a stand, and, darn it, we will. We are going to write a petition in a Google Doc that we will share with management, letting them know exactly how we feel about their inane decision. But it's not just you and I to do the writing: we'll get the troops to contribute their thoughts as well. We'll collect comments from colleagues and embed them in the document using a simple Google Form with two questions: "Enter your comment" and "Enter your name."</description>
            <link>https://benronkin.com/blog/insert-form-submissions-into-google-docs.html</link> 
            <guid>https://benronkin.com/blog/insert-form-submissions-into-google-docs.html</guid>
            <pubDate>Sat, 28 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Add a form to an email and save responses in a Google Sheet</title>
            <description>Let's pretend that you run a home-improvement store, with lots of products on the shelves. Every day or so, you pick a bunch of products and note them in a Google Sheet. You'd like to have your loyal employee run an inventory check and note the quantity of each product. There's only one wrinkle: as loyal as the employee is, you don't want to give them access to the Google Sheet itself; who knows what they'd do with it? How can we automate our way around this pickle?</description>
            <link>https://benronkin.com/blog/add-form-to-email-with-google-apps-script.html</link> 
            <guid>https://benronkin.com/blog/add-form-to-email-with-google-apps-script.html</guid>
            <pubDate>Wed, 25 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Sync Gmail and Google Calendar recipients to Google Contacts - Part 2</title>
            <description>In the previous post we looked at how to populate a Google Sheet with names and email addresses from our Gmail and Google Calendar accounts. In this post we'll see how to push this information into Google Contacts using the Google People API.</description>
            <link>https://benronkin.com/blog/sync-gmail-calendar-contacts-part2.html</link> 
            <guid>https://benronkin.com/blog/sync-gmail-calendar-contacts-part2.html</guid>
            <pubDate>Mon, 23 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Sync Gmail and Google Calendar recipients to Google Contacts</title>
            <description>I interact with a lot of people using Gmail messages and Google Calendar events. I'd like to collect the contact info of these individuals in Google Contacts as my de-facto CRM. Adding these records manually takes too much time: I'd like this done programmatically. Thing is, I don't want to mine every email and invite: some of these are transactional emails or one-off meetings. Instead, I'd like to have the contact info aggregated into a Google Sheet where I can visually inspect the rows, mark which ones to save and which ones to ignore.</description>
            <link>https://benronkin.com/blog/sync-gmail-calendar-contacts.html</link> 
            <guid>https://benronkin.com/blog/sync-gmail-calendar-contacts.html</guid>
            <pubDate>Thu, 19 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Improve user experience with custom menus in Google Sheets</title>
            <description>Custom menus in Google Sheets are a terrific way to let users kick off automation functions on their own terms. When we empower users to decide when and what automation to run, we improve the effectiveness of our automation code. But custom menus have two issues when they're part of scripts that require access to sensitive or restricted scopes...</description>
            <link>https://benronkin.com/blog/improve-user-experience-with-custom-menus-in-google-sheets.html</link> 
            <guid>https://benronkin.com/blog/improve-user-experience-with-custom-menus-in-google-sheets.html</guid>
            <pubDate>Mon, 16 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Handle column changes in Google Sheets with Apps Script</title>
            <description>A client of mine recently asked for my help in automating the data pulls they were doing. They wanted me to use the system's REST API to fetch new data and write it to a Google Sheet. The response payload of the API was pretty easy to navigate: essentially an array with a bunch of objects, where each object represented a user with certain keys for first and last names, phone, email -- that sort of thing. All I had to do was call the API periodically, get back new user objects, and them to a nested array so that I can append the data to Google Sheets. Easy enough, but there was one wrinkle...</description>
            <link>https://benronkin.com/blog/handle-column-changes-in-google-sheets-with-app-script.html</link> 
            <guid>https://benronkin.com/blog/handle-column-changes-in-google-sheets-with-app-script.html</guid>
            <pubDate>Thu, 12 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Exchange data between two Apps Scripts using a webapp</title>
            <description>We use Apps Script to increase our productivity when we use google sheets or google docs. But did you know that apps script can communicate with another apps script? We can exchange data between sheets that have their own scripts without having the user in the middle. One way to accomplish that is with the use of apps script web apps. A web app provides a url that users can access via a browser, but the url can also be used by another script.</description>
            <link>https://benronkin.com/blog/exchange-data-between-two-apps-scripts-with-webapp.html</link> 
            <guid>https://benronkin.com/blog/exchange-data-between-two-apps-scripts-with-webapp.html</guid>
            <pubDate>Tue, 10 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Take your GAS to the next level with higher-order functions</title>
            <description>Imagine you have a Google Sheet with tabular sales data. The table contains sales volumes from four regions, represented in columns, and monthly sales volume represented in rows. Let's also say that you are developing a Google Apps Script that needs to do a few things, including summing up the sales in the East region. How would you go about coding that? Well, the easiest thing to do is to pull the values out of the East column one by one and...</description>
            <link>https://benronkin.com/blog/higher-order-functions-in-google-apps-script.html</link> 
            <guid>https://benronkin.com/blog/higher-order-functions-in-google-apps-script.html</guid>
            <pubDate>Mon, 9 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Increase coding productivity with Apps Script macros</title>
            <description>Google Apps Script is all about increasing work productivity through automation. But the road to automation involves a lot of mental and manual work. When we're developing scripts, we are often asked to make changes in Google Sheets or Google Drive items. Since we don't always get the scripts to make the right changes right away, we often have to undo the script changes manually, as we develop and enhance the script. And there's only so much we can do with the UNDO button in google sheets.</description>
            <link>https://benronkin.com/blog/increase-productivity-with-google-apps-script-macros.html</link> 
            <guid>https://benronkin.com/blog/increase-productivity-with-google-apps-script-macros.html</guid>
            <pubDate>Sun, 8 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Validate user files with Google Apps Script</title>
            <description>Let's say that you have a Google Apps Script that processes files that are generated by other people. Maybe it's your clients, or your team members, or your channel partners who provide the files – whatever the case may be, you build your script to operate on other people's files. In such a scenario I would assume that as a good developer, you would reach out to these people and agree with them on how they should populate and handle those files. Maybe you even give them a file template and ask them not to change its structure, but merely to duplicate it and fill out the information and then submit it to your script.</description>
            <link>https://benronkin.com/blog/validate-user-files-with-apps-script.html</link> 
            <guid>https://benronkin.com/blog/validate-user-files-with-apps-script.html</guid>
            <pubDate>Fri, 6 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Display a sidebar inside Google Sheet</title>
            <description>A Google Sheet sidebar is an extra pane that you can open alongside your sheets. It lets you manipulate the contents of the sheets from a centralized place. I'll review the sidebar in the context of mail merge, a solution that I covered in previous posts. Mail merge has an admin sheet where the user can select an email template, preview the campaign, and launch the campaign. In this post, I'll migrate this functionality to a sidebar.</description>
            <link>https://benronkin.com/blog/display-google-sheet-sidebar.html</link> 
            <guid>https://benronkin.com/blog/display-google-sheet-sidebar.html</guid>
            <pubDate>Wed, 4 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Display HTML page inside Google Sheets</title>
            <description>Happy New Year! Here's to a calmer and saner year! Displaying HTML pages inside a spreadsheet is quite common and useful when you do automation stuff. The HTML resides inside a popup that we can easily show when the user clicks on a button or selects from a custom menu. The HTML inside a popup supports CSS and Javascript, so you can offer really beautiful and useful HTML experiences inside a spreadsheet.</description>
            <link>https://benronkin.com/blog/display-html-page-inside-google-sheet.html</link> 
            <guid>https://benronkin.com/blog/display-html-page-inside-google-sheet.html</guid>
            <pubDate>Sun, 1 Jan 2023 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Send SMS Messages automatically from Google Sheets</title>
            <description>Sending SMS messages directly from a Google Sheet is both easy and useful. Let's assume that we have a Google Sheet that gets populated with phone numbers of people that we'd like to contact via an SMS message. In this post we will see how to implement a solution using Google Apps Script.</description>
            <link>https://benronkin.com/blog/send-sms-messages-with-app-script.html</link> 
            <guid>https://benronkin.com/blog/send-sms-messages-with-app-script.html</guid>
            <pubDate>Thu, 29 Dec 2022 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Using Google Docs text in Apps Script</title>
            <description>In the previous post, we looked at how to scan a Google Drive folder in order to collect the names of its files, and use them to populate a dropdown in Google Sheet. We will now see how to access the text inside these Google Docs in order to use them as email templates in our mail-merge solution.</description>
            <link>https://benronkin.com/blog/using-google-doc-text-in-google-apps-script.html</link> 
            <guid>https://benronkin.com/blog/using-google-doc-text-in-google-apps-script.html</guid>
            <pubDate>Wed, 14 Dec 2022 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Populate Google Sheet dropdown with names of Google Drive files</title>
            <description>In the previous post we looked at a rudimentary mail merge for Gmail using Apps Script. The script used a global object that housed the default subject line and body for our emails. We incorporated placeholders into the text that the script replaced with recipients' data. There are, however, a couple of issues with this approach. So, instead, we are going to store the email templates in a Google Docs. We will populate a dropdown with the names of the files, so that we can choose the email template with a single mouse click.</description>
            <link>https://benronkin.com/blog/google-sheet-dropdown-with-names-of-google-drive-files.html</link> 
            <guid>https://benronkin.com/blog/google-sheet-dropdown-with-names-of-google-drive-files.html</guid>
            <pubDate>Sat, 10 Dec 2022 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Create mail merge for Gmail using Apps Script</title>
            <description>In this post I offer a short and sweet Google Apps Script for creating mail merge in Gmail. The script is very basic, merely meant to introduce the topic. In future posts I'll add more features and capabilities. Mail merge is essentially the ability to send multiple emails in one operation, yet personalize the email to each recipient. It saves you the time and energy to compose multiple emails to multiple recipients that say the same thing. With mail merge, you take an email template, and a list of recipients. You then replace placeholders in the template with the data of each recipients. Like I said, pretty simple stuff.</description>
            <link>https://benronkin.com/blog/create-mail-merge-for-gmail-with-google-apps-script.html</link> 
            <guid>https://benronkin.com/blog/create-mail-merge-for-gmail-with-google-apps-script.html</guid>
            <pubDate>Fri, 9 Dec 2022 18:00:00 -0800</pubDate>
        </item>
        <item>
            <title>Create an email auto-responder with Apps Script</title>
            <description>Having a system that automatically responds to incoming email messages can be a great time saver. In this post you will learn how to create such a system for Gmail, using Google Apps Script.</description>
            <link>https://benronkin.com/blog/create-email-auto-responder-with-apps-script.html</link> 
            <guid>https://benronkin.com/blog/create-email-auto-responder-with-apps-script.html</guid>
            <pubDate>Fri, 18 Nov 2022 18:00:00 -0800</pubDate>
        </item>
    </channel>
</rss>